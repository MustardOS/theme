name: Theme Table and Scripts Generate

on: workflow_dispatch

concurrency: 
  group: release

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    steps:

      - name: Checkout repo
        uses: actions/checkout@v4
# Here's some info! So firstly, the theme table. First text files are generated with the theme table content, with images and credits
# in each cell. This includes the preview folder, so we create a temporary credits file before deleting the preview cell.
# There is no need to create a temporary preview/preview.png file as the images are referred to as linked images directly from the preview folder.
      - name: Create temporary credits file
        run: |
          echo preview > "preview/credits.txt"
 # This is a huge step... it generates individual text files named after the directory, with a mostly correctly formatted cell within the table.         
      - name: Generate text file with all directory names, with directory name inside
        run: |
          mkdir -p /tmp/page && for dir in */; do dir_name="${dir%/}"; (cd "${dir_name}" && echo "| ![${dir_name}](<https://raw.githubusercontent.com/MustardOS/theme/main/preview/${dir_name}.png>) <br>[${dir_name}" > "/tmp/page/${dir_name}.txt" && echo -n "](https://github.com/MustardOS/theme/releases/latest/download/${dir_name}.zip)<br><sup>" | tr [:space:] "." >> "/tmp/page/${dir_name}.txt"); cat "${dir_name}/credits.txt" >> "/tmp/page/${dir_name}.txt"; (cd "${dir_name}" && echo "</sup>" >> "/tmp/page/${dir_name}.txt"); done
 # Next we format the text files to only be one line.       
      - name: Replace line breaks with space
        run: |
          mkdir -p /tmp/txt && for dir in */; do dir_name="${dir%/}"; tr "\n" " " < "/tmp/page/${dir_name}.txt" > "/tmp/txt/${dir_name}.txt"; done

      - name: Ensure all line breaks are now deleted
        run: |
          for dir in */; do dir_name="${dir%/}"; tr -d "\n\r" < "/tmp/txt/${dir_name}.txt" > "/tmp/page/${dir_name}.txt"; done
# We remove the preview text file as it is no longer needed. We do not want this directory's contents to show in a single cell on the table.
      - name: Delete placeholder preview text file
        run: |
          rm /tmp/page/preview.txt

      - name: Delete placeholder preview text file
        run: |
          rm /tmp/txt/preview.txt
# We do this to easily sort the theme cells in each row to be alphabetical by capitalising all the file names.
# This will help to ignore if the original theme was lower or uppercase.
      - name: make all file names uppercase
        run: |
          cd /tmp/page && for f in *; do mv -- "$f" "$(tr [:lower:] [:upper:] <<< "$f")" ; done

      - name: Add enter at end of every file
        run: |
          for file in /tmp/page/*; do sed -i -e '$a\' "$file"; done
# We combine to begin creating the working table.          
      - name: Combine the files
        run: |
          cat /tmp/page/* > /tmp/page/complet.txt
# There we go, the table is made with three themes per row!
      - name: Format into three per line
        run: |
          paste -d ' ' - - - < /tmp/page/complet.txt > /tmp/page/complete.txt

      - name: Delete placeholder text file
        run: |
          rm /tmp/page/complet.txt
# Prepare to replace the old README and themesite files.
      - name: Delete old theme site
        run: |
          rm themesite.md

      - name: Delete old README
        run: |
          rm README.md
 # Finishing touches to the table...         
      - name: Insert | at end of every line
        run: |
          sed -i "s/$/ |/" /tmp/page/complete.txt
          
      - name: Test to see if this has worked
        run: |
          more "/tmp/page/complete.txt"    
# Add the info above the table and the empty top rows to define how the table is aligned.
      - name: Merge with the theme template
        run: |
          cat ".github/md_templates/themepagetemplate.md" /tmp/page/complete.txt > /tmp/themesite.md

      - name: Merge with the readme template
        run: |
          cat ".github/md_templates/readmetemplate.md" /tmp/page/complete.txt > /tmp/readme.md

      - name: See if this worked?
        run: |
          more "/tmp/themesite.md" 

      - name: See if this worked?
        run: |
          more "/tmp/readme.md" 
# Commit this later...
      - name: Move file to correct location
        run: |
          cp "/tmp/themesite.md" "themesite.md"

      - name: Move file to correct location
        run: |
          cp "/tmp/readme.md" "README.md"
# Here is the preliminary work for an on-device theme downloader...
# This generates a basic script for every theme. It assigns global variables for the app to reference, before redirecting to a downloader script.
      - name: Create individual script files for on-device theme downloader
        run: |
          mkdir -p /tmp/scripts && for dir in */; do dir_name="${dir%/}"; (cd "${dir_name}" && echo -e -n "#!/bin/sh \n \nURL=" > "/tmp/scripts/${dir_name}.sh" && echo -e -n "\"https://github.com/MustardOS/theme/releases/latest/download/${dir_name}.zip\"" | sed 's/ & /./g' | tr [:space:] "." >> "/tmp/scripts/${dir_name}.sh"); (cd "${dir_name}" && echo -e -n "\nTHEME_NAME=\"${dir_name}\"\nLOCAL_ZIP_PATH=\"/mnt/mmc/MUOS/theme/${dir_name}.zip\"\nLOCAL_PREVIEW=\"/mnt/mmc/MUOS/theme/preview/${dir_name}.png\"\nARCHIVE_ZIP=\"/mnt/mmc/ARCHIVE/${dir_name}.zip\"\nSH_NAME=\"${dir_name}.sh\"\n" >> "/tmp/scripts/${dir_name}.sh" && echo -e -n "PREVIEW=\"https://raw.githubusercontent.com/MustardOS/theme/main/preview/${dir_name}.png\"\nCREDITS_INFO=\"" | sed 's/ /%20/g' >> "/tmp/scripts/${dir_name}.sh"); cat "${dir_name}/credits.txt" | tr -d "\n\r" >> "/tmp/scripts/${dir_name}.sh"; (cd "${dir_name}" && echo -e "\" \n \nrm -rf \"\$MUX_TEMP\" /tmp/muxlog_* \n \n. \"/mnt/mmc/MUOS/application/.ThemeDownloader/scripts/ThemeInstall.sh\" \n " >> "/tmp/scripts/${dir_name}.sh"); done
# Same deal as earlier.       
      - name: Remove preview file
        run: |
          rm "/tmp/scripts/preview.sh"
# Commit later...          
      - name: Push scripts to the secret folder
        run: |
          (shopt -s dotglob; cp /tmp/scripts/* ".github/.ThemeDownloader/themes/")

      - name: Delete placeholder credits file
        run: |
          rm preview/credits.txt
# Creating a text file showing off every single theme. Hoping to use this as a reference for the list items within the app.
      - name: Create complete theme list as txt
        run: |
          (shopt -s dotglob; rm ".github/.ThemeDownloader/scripts/themes.txt") 
          (shopt -s dotglob; touch ".github/.ThemeDownloader/scripts/themesno.txt")
          (shopt -s dotglob; for dir in */; do dir_name="${dir%/}"; echo "${dir_name}" >> ".github/.ThemeDownloader/scripts/themesno.txt"; done)

      - name: Edit this list to remove non-theme folders
        run: |
          (shopt -s dotglob; sed -i '/.git/d' ".github/.ThemeDownloader/scripts/themesno.txt")
          (shopt -s dotglob; sed -i '/.github/d' ".github/.ThemeDownloader/scripts/themesno.txt")
          (shopt -s dotglob; sed -i '/preview/d' ".github/.ThemeDownloader/scripts/themesno.txt")
          (shopt -s dotglob; cat ".github/.ThemeDownloader/scripts/themesno.txt")

      - name: Sort themes by alphabetical order ignoring case
        run: |
          sort -f ".github/.ThemeDownloader/scripts/themesno.txt" > ".github/.ThemeDownloader/scripts/themes.txt"
          (shopt -s dotglob; cat ".github/.ThemeDownloader/scripts/themes.txt")

      - name: Remove temporary non-alphabetical text file
        run: |
          (shopt -s dotglob; rm ".github/.ThemeDownloader/scripts/themesno.txt") 
# Hoping to use the following action to show credits per theme within the app.
      - name: Generate credits per theme
        run: |
          for dir in */ ; do dir_name="${dir%/}"
          if [[ "${dir_name}" != preview  ]] ; then
          (shopt -s dotglob; cat "${dir_name}/credits.txt" > ".github/.ThemeDownloader/credits/${dir_name}.txt")
          fi
          done
# Hoping to show the preview image for all the themes within the app.
      - name: Copy over preview images to script folder
        run: |
          for dir in */; do dir_name="${dir%/}";
          if [[ "${dir_name}" != preview ]]; then
          (shopt -s dotglob; cp "preview/${dir_name}.png" ".github/.ThemeDownloader/previews/${dir_name}.png")
          fi
          done
# I found it quicker to download onto the device a full zip and unzipping on the device.

      - name: Remove old zips
        run: 
          (shopt -s dotglob; rm ".github/.ThemeDownloader/themes/Scripts.zip") 

      - name: Remove old zips
        run: 
          (shopt -s dotglob; rm ".github/.ThemeDownloader/previews/Previews.zip") 

      - name: Remove old zips
        run: 
          (shopt -s dotglob; rm ".github/.ThemeDownloader/credits/Credits.zip") 
          
      - name: Scripts - Zip these combo files so that the download to the device is speedy - unzip on device
        run:
          (shopt -s dotglob; cd ".github/.ThemeDownloader/themes/" && zip Scripts.zip *.sh)
          
      - name: Previews - Zip these combo files so that the download to the device is speedy - unzip on device
        run:
          (shopt -s dotglob; cd ".github/.ThemeDownloader/previews/" && zip Previews.zip *.png)

      - name: Credits - Zip these combo files so that the download to the device is speedy - unzip on device
        run:
          (shopt -s dotglob; cd ".github/.ThemeDownloader/credits/" && zip Credits.zip *.txt)

      - name: Non-zip cleanup
        run:
          (shopt -s dotglob; cd ".github/.ThemeDownloader/credits/" && rm *.txt)

      - name: Non-zip cleanup
        run:
          (shopt -s dotglob; cd ".github/.ThemeDownloader/previews/" && rm *.png)

      - name: Non-zip cleanup
        run:
          (shopt -s dotglob; cd ".github/.ThemeDownloader/themes/" && rm *.sh)
# And committing it all!
      - name: Push files to the github, replacing the previous
        run: |
          git config --global user.name "VagueParade"
          git config --global user.email "166325657+VagueParade@users.noreply.github.com"

          git add -A
          git commit -m "Action with generated files"
          git push
          
