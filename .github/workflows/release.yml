name: muOS Complete Archive Manager Theme Releases

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    
concurrency: 
  group: release

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
# Create theme archives here! Zipping everything together and creating a complete theme archive.
      - name: Zip Legacy directories
        run: |
          mkdir -p /tmp/release
          for dir in 2508.0_Goose/*/; do
            [ -d "$dir" ] || continue
            zip_name=$(basename "$dir")
            zip_path="/tmp/release/${zip_name}.muxthm"
            echo "Zipping contents of $dir into $zip_path"
            
            (cd "$dir" && zip -qq -r "$zip_path" ./*)
          done
          
# Create the archive!          
      - name: List archives
        run: |
          ls -1 /tmp/release
          
      - name: Delete old releases (older than 3 months)
        run: |
          # Get latest release tag (never delete this one)
          LATEST=$(gh release view --json tagName -q '.tagName')
          echo "Latest release: $LATEST"

          # Get releases older than 90 days
          OLD_RELEASES=$(gh release list --limit 1000 --json name,tagName,createdAt -q \
            '.[] | select((.createdAt | fromdateiso8601) < (now - (90*24*60*60))) | {tag: .tagName, name: .name}')

          echo "$OLD_RELEASES" | while read -r release; do
            tag=$(echo "$release" | jq -r '.tag')
            name=$(echo "$release" | jq -r '.name')

            # Skip if it's the latest release
            if [[ "$tag" == "$LATEST" ]]; then
              echo "Skipping latest release: $tag  $name"
              continue
            fi

            # Skip if last Pixie release
            if [[ "$name" == "Pixie Themes Final Release" ]]; then
              echo "Name Match, Skipping last Pixie release: $tag  $name"
              continue
            fi

            # Skip if it's the latest release
            if [[ "$tag" == "2025-08-23_1523" ]]; then
              echo "Tag Match, Skipping last Pixie release: $tag  $name"
              continue
            fi

            # Otherwise delete it
            echo "Deleting release: $tag  $name"
            # gh release delete "$tag" -y
            # git push origin :refs/tags/"$tag" || true  # delete the tag too
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get release name for artifacts
        id: date
        run: |
            echo "date=$(date +'%Y-%m-%d_%H%M')" >> $GITHUB_OUTPUT

      - name: Prepare Release
        uses: ncipollo/release-action@v1.14.0
        with:
          name: "All Themes"
          tag: "${{steps.date.outputs.date}}"
          allowUpdates: true
          draft: true
          prerelease: false
          replacesArtifacts: false
          omitNameDuringUpdate: true
          artifacts: "/tmp/release/*.muxthm"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Release
        uses: ncipollo/release-action@v1.14.0
        with:
          name: "All Themes"
          tag: "${{steps.date.outputs.date}}"
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          allowUpdates: true
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Info
        id: info
        run: |
          echo "Published themes: ${{steps.date.outputs.date}} to: https://github.com/${{ steps.env.outputs.RELEASE_ORG}}/${{ steps.env.outputs.RELEASE_REPO}}"
          
